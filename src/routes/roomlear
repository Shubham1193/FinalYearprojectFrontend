import React, { useEffect, useState , useRef } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import Editor from "@monaco-editor/react";
import axios from "axios";
import Navbar from "./Navbar";
import { useSocket } from "../context/SocketProvider";
import Videos from "./Videos";
import { useSelector } from "react-redux";
import Friends from "../components/Friends";
import * as Diff from "diff";

const Room = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const socket = useSocket();
  const { roomId: id } = useSelector((state) => state.room);

  const ques = location.state?.question;
  const [userLang, setUserLang] = useState("python");
  const [userTheme, setUserTheme] = useState("vs-dark");
  const [fontSize, setFontSize] = useState(15);
  const [code, setCode] = useState("");
  const [result, setResult] = useState([]);
  const [question, setQuestion] = useState(null);
  const [selectedTestCase, setSelectedTestCase] = useState(0);
  const lastCodeRef = useRef(""); // Track the last code state
  const editorRef = useRef(null); // Ref to Monaco Editor instance

  const options = { fontSize };

  // Function to set default code based on language and question
  const setDefaultCode = (lang, q) => {
    console.log("setDefaultCode called with:", { lang, question: q });
    if (q) {
      const defaultCode = lang === "python"
        ? q.defaultcode.python.user.join("\n")
        : q.defaultcode.java.user.join("\n");
      console.log("Setting code to:", defaultCode);
      setCode(defaultCode);
    } else {
      console.log("No question provided, code not updated");
    }
  };


  const handleRemoteCodeUpdate = ({ delta }) => {
    const newCode = Diff.applyPatch(lastCodeRef.current, delta);
    console.log(newCode)
    if (newCode !== false && newCode !== code) {
      const editor = editorRef.current;
      const selection = editor.getSelection(); // Preserve cursor/selection
      setCode(newCode);
      lastCodeRef.current = newCode;
      editor.setValue(newCode); // Update editor without full refresh
      editor.setSelection(selection); // Restore cursor/selection
    }
  };

  // Mount editor and store reference
  const handleEditorDidMount = (editor) => {
    editorRef.current = editor;
  };


  // Single useEffect for initialization and socket setup
  useEffect(() => {
    setQuestion(ques);
    setDefaultCode(userLang, ques);
    socket.emit("question", { id, ques });

    // const handleUpdatedCode = (newCode) => {
    //   if (newCode !== code) { // Prevent feedback loop
    //     setCode(newCode);
    //     console.log(newCode)
    //   }
    // };

    const handleCodeResult = (data) => {
      setResult(JSON.parse(data));
    };

    socket.on("updated-code", handleRemoteCodeUpdate);
    socket.on("code-result", handleCodeResult);
    socket.on("syncQuestion", handleQuestionId);
    socket.on("clear-res", () => setResult([]));
    socket.on("submission-results", (results) => setResult(results));
    socket.on("languageChangeSync", handleLanguageChange);

    return () => {
      socket.off("updated-code", handleRemoteCodeUpdate);
      socket.off("code-result", handleCodeResult);
      socket.off("syncQuestion", handleQuestionId);
      socket.off("clear-res");
      socket.off("submission-results");
      socket.off("languageChange", handleLanguageChange);
    };
  }, [id, ques, socket]);
  // why that earlier question arise . what i can understand other user still had ques and this obove use effect
  // only runs onece per qeution and it handleLangaugechage quetion is still null . only runs onse and still null
  // if langauge as paremet in above it sets the question again to ques so seperate useeffect 
  useEffect(() => {
    setDefaultCode(userLang, question)
  }, [userLang])

  // in above userLnage change due to socket so above useeffect run 


  // on top of this add yjs only sync par notheing else


  const handleLanguageChange = ({ language }) => {
    console.log("receivd langate")
    setUserLang(language);
  };

  const handleQuestionId = (newQues) => {
    setQuestion(newQues);
    console.log("question recienved")
    setDefaultCode(userLang, newQues);
  };

  // Sync language change with other users
  const handleLanguageChangeLocal = (newLang) => {
    console.log("langauge chaned locally")
    setUserLang(newLang);
    if (question) {
      setDefaultCode(newLang, question);
    }
    socket.emit("languageChange", { id, language: newLang, question: question });
    console.log("called emit to change language")
  };

  // Handle code changes from editor
  // const handleCodeChange = (newCode) => {
  //   setCode(newCode);
  //   socket.emit("update-code", { code: newCode, id });
  // };
  const handleCodeChange = (newCode) => {
    const delta = Diff.createPatch("code", lastCodeRef.current, newCode);
    setCode(newCode);
    lastCodeRef.current = newCode;
    socket.emit("update-code", { delta, id });
  };

  const handleSubmit = async () => {
    socket.emit("clear-res", { id });

    const hiddenCode = userLang === "python"
      ? ques.defaultcode.python.hidden.join("\n") || ""
      : ques.defaultcode.java.hidden.join("\n") || "";

    const fullCode = `${code}\n${hiddenCode}`.trim();
    const data = { fullCode, userLang, id, question };

    try {
      await axios.post("https://finalyearprojectbackend-2lbw.onrender.com/submit", data);
    } catch (error) {
      console.error("Submit error:", error);
    }
  };

  const searchQuestion = () => {
    navigate("/problems");
  };

  return (
    <div className="min-h-screen overflow-hidden bg-[#1A1A2E]">
      <div className="h-[8vh] w-full">
        <Navbar
          userLang={userLang}
          setUserLangCustom={handleLanguageChangeLocal} // Use custom handler
          userTheme={userTheme}
          setUserTheme={setUserTheme}
          fontSize={fontSize}
          setFontSize={setFontSize}
          submit={handleSubmit}
          searchQuestion={searchQuestion}
          roomId={id}
        />
      </div>

      <div className="flex h-[92vh] w-full mt-2">
        {/* Left Sidebar: Problem Details */}
        <div className="w-1/4 h-full p-4 bg-[#2A2A2A] text-white overflow-auto">
          {question ? (
            <>
              <div className="mb-4 px-4 py-3 rounded-xl bg-[#3A3A3A] text-2xl font-bold">
                {question.title}
              </div>
              <div className="flex items-center mb-4 space-x-4">
                <span className="px-3 py-2 rounded-xl bg-[#3A3A3A] text-blue-400 text-lg">
                  {question.category}
                </span>
                <span className="px-3 py-2 rounded-xl bg-[#3A3A3A] text-blue-400 text-lg">
                  {question.difficulty}
                </span>
              </div>
              <div className="mb-4 px-4 py-3 rounded-xl bg-[#3A3A3A] text-lg">
                {question.description}
              </div>
              <div className="mb-4 px-4 py-3 rounded-xl bg-[#3A3A3A] text-lg">
                <strong>Constraints:</strong>
                {question.constraints.map((data, index) => (
                  <p key={index}>{data}</p>
                ))}
              </div>
              {question.example && question.example.length > 0 && (
                <div className="mb-4 px-4 py-3 rounded-xl bg-[#3A3A3A] text-lg">
                  <strong>Examples:</strong>
                  {question.example.map((ex, index) => (
                    <div key={index} className="mt-4">
                      <div className="font-semibold">Example {index + 1}:</div>
                      <div className="mt-1">
                        <strong>Input:</strong>
                        <pre className="mt-1 p-2 bg-[#4A4A4A] rounded">{ex.input}</pre>
                      </div>
                      <div className="mt-1">
                        <strong>Output:</strong>
                        <pre className="mt-1 p-2 bg-[#4A4A4A] rounded">{ex.output}</pre>
                      </div>
                      <div className="mt-1">
                        <strong>Explanation:</strong>
                        {(() => {
                          const [text, imageUrl] = ex.explanation.split("Image: ");
                          return (
                            <>
                              {text && (<div className="mt-1 p-2 bg-[#4A4A4A] rounded w-auto">{text}</div>)}
                              {imageUrl && (
                                <img
                                  src={imageUrl.trim()}
                                  alt={`Example ${index + 1}`}
                                  className="mt-2 max-w-full rounded"
                                />
                              )}
                            </>
                          );
                        })()}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </>
          ) : (
            <div className="flex items-center justify-center h-full text-xl">
              Select a problem
            </div>
          )}
        </div>

        {/* Center: Editor and Code Results */}
        <div className="w-1/2 h-full bg-black flex flex-col">
          <div className="h-3/5">
            <Editor
              height="100%"
              width="100%"
              theme={userTheme}
              language={userLang}
              value={code}
              onChange={handleCodeChange}
              onMount={handleEditorDidMount}
              options={options}
            />
          </div>

          {/* Test Case Results with Tabs */}
          <div className="overflow-auto text-white p-1">
            {result?.testCase && result.testCase.length > 0 ? (
              <div className="flex mb-2 overflow-x-auto py-1">
                {result.testCase.map((_, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedTestCase(index)}
                    className={`px-3 py-1 mr-2 rounded-lg flex-shrink-0 ${selectedTestCase === index
                        ? "bg-blue-600 text-white"
                        : result.testCase[index].expectedOutput === result.testCase[index].output
                          ? "bg-green-900 text-white"
                          : "bg-red-900 text-white"
                      }`}
                  >
                    Test {index + 1}
                  </button>
                ))}
              </div>
            ) : null}

            {result?.testCase && result.testCase.length > 0 ? (
              <div
                className={`border rounded-xl p-3 mb-2 ${result.testCase[selectedTestCase].expectedOutput ===
                    result.testCase[selectedTestCase].output
                    ? "border-green-500 bg-[#1f2d1f]"
                    : "border-red-500 bg-[#2d1f1f]"
                  }`}
              >
                <div className="text-m">
                  Test Case {selectedTestCase + 1}:{" "}
                  <span
                    className={
                      result.testCase[selectedTestCase].expectedOutput ===
                        result.testCase[selectedTestCase].output
                        ? "text-green-500"
                        : "text-red-500"
                    }
                  >
                    {result.testCase[selectedTestCase].expectedOutput ===
                      result.testCase[selectedTestCase].output
                      ? "Passed"
                      : "Failed"}
                  </span>
                </div>
                <div className="mt-2">
                  <span className="font-semibold">Input:</span>{" "}
                  <pre className="whitespace-pre-wrap">
                    {result.testCase[selectedTestCase].input}
                  </pre>
                </div>
                <div>
                  <span className="font-semibold">Expected Output:</span>{" "}
                  <span className="text-green-400">
                    {result.testCase[selectedTestCase].expectedOutput}
                  </span>
                </div>
                <div>
                  <span className="font-semibold">Your Output:</span>{" "}
                  <span className="text-yellow-400">
                    {result.testCase[selectedTestCase].output}
                  </span>
                </div>
              </div>
            ) : (
              <div className="text-center text-gray-400 font-bold">
                Run your code to see test results
              </div>
            )}
          </div>
        </div>

        {/* Right Sidebar: Videos */}
        <div className="w-1/4 h-full p-2">
          <Videos />
        </div>
      </div>
      <Friends />
    </div>
  );
};

export default Room;